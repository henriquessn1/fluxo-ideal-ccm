import Keycloak from 'keycloak-js';

// Configura√ß√£o do Keycloak baseada nas vari√°veis de ambiente
const keycloakConfig = {
  url: import.meta.env.VITE_KEYCLOAK_URL,
  realm: import.meta.env.VITE_KEYCLOAK_REALM,
  clientId: import.meta.env.VITE_KEYCLOAK_CLIENT_ID,
};

// Inst√¢ncia global do Keycloak
let keycloakInstance: Keycloak | null = null;
let initializationPromise: Promise<boolean> | null = null;
let isInitialized = false;

export const getKeycloakInstance = () => {
  if (!keycloakInstance) {
    console.log('üîê Criando nova inst√¢ncia do Keycloak');
    keycloakInstance = new Keycloak(keycloakConfig);
  }
  return keycloakInstance;
};

export const initializeKeycloak = async (): Promise<boolean> => {
  // Se j√° est√° sendo inicializado, retornar a promessa existente
  if (initializationPromise) {
    console.log('üîê Aguardando inicializa√ß√£o em progresso...');
    return initializationPromise;
  }

  // Se j√° foi inicializado, retornar o estado atual
  if (isInitialized) {
    console.log('üîê Keycloak j√° foi inicializado');
    return keycloakInstance?.authenticated || false;
  }

  // Inicializar pela primeira vez
  const keycloak = getKeycloakInstance();
  
  initializationPromise = keycloak.init(keycloakInitOptions).then((authenticated) => {
    isInitialized = true;
    initializationPromise = null; // Limpar para futuras verifica√ß√µes
    console.log('üîê Inicializa√ß√£o conclu√≠da, autenticado:', authenticated);
    return authenticated;
  }).catch((error) => {
    initializationPromise = null; // Limpar em caso de erro
    throw error;
  });

  return initializationPromise;
};

export const isKeycloakInitialized = () => isInitialized;

// Configura√ß√µes de inicializa√ß√£o
export const keycloakInitOptions = {
  onLoad: 'check-sso' as const,
  checkLoginIframe: false, // Desabilita iframe para evitar CSP issues
  pkceMethod: 'S256' as const,
  enableLogging: true, // Para debug
};

export default getKeycloakInstance();